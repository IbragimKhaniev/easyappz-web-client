/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationZs200,
  GetApplicationZs401,
  GetApplicationZs500,
  GetApplicationZsId404,
  GetApplicationZsId500,
  IMongoModelApplicationZ,
  PostApplicationZs400,
  PostApplicationZs500,
  PostApplicationZsBody
} from './types'
import getApplicationZsIdMutator from '../axios';
import type { ErrorType as GetApplicationZsIdErrorType } from '../axios';
import getApplicationZsMutator from '../axios';
import type { ErrorType as GetApplicationZsErrorType } from '../axios';
import postApplicationZsMutator from '../axios';
import type { ErrorType as PostApplicationZsErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID
 */
export const getApplicationZsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationZsIdMutator<IMongoModelApplicationZ>(
      {url: `/applicationZs/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationZsIdQueryKey = (id: string,) => {
    return [`/applicationZs/${id}`] as const;
    }

    
export const getGetApplicationZsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationZsId>>, TError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationZsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationZsId>>> = ({ signal }) => getApplicationZsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationZsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationZsId>>>
export type GetApplicationZsIdQueryError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>


export function useGetApplicationZsId<TData = Awaited<ReturnType<typeof getApplicationZsId>>, TError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZsId>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZsId<TData = Awaited<ReturnType<typeof getApplicationZsId>>, TError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZsId>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZsId<TData = Awaited<ReturnType<typeof getApplicationZsId>>, TError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID
 */

export function useGetApplicationZsId<TData = Awaited<ReturnType<typeof getApplicationZsId>>, TError = GetApplicationZsIdErrorType<GetApplicationZsId404 | GetApplicationZsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationZsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (req.user).
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getApplicationZs = (
    
 signal?: AbortSignal
) => {
      
      
      return getApplicationZsMutator<GetApplicationZs200>(
      {url: `/applicationZs`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationZsQueryKey = () => {
    return [`/applicationZs`] as const;
    }

    
export const getGetApplicationZsQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationZs>>, TError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationZsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationZs>>> = ({ signal }) => getApplicationZs(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationZsQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationZs>>>
export type GetApplicationZsQueryError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>


export function useGetApplicationZs<TData = Awaited<ReturnType<typeof getApplicationZs>>, TError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZs>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZs>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZs<TData = Awaited<ReturnType<typeof getApplicationZs>>, TError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZs>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZs>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZs<TData = Awaited<ReturnType<typeof getApplicationZs>>, TError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetApplicationZs<TData = Awaited<ReturnType<typeof getApplicationZs>>, TError = GetApplicationZsErrorType<GetApplicationZs401 | GetApplicationZs500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationZsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const postApplicationZs = (
    postApplicationZsBody: PostApplicationZsBody,
 signal?: AbortSignal
) => {
      
      
      return postApplicationZsMutator<IMongoModelApplicationZ>(
      {url: `/applicationZs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApplicationZsBody, signal
    },
      );
    }
  


export const getPostApplicationZsMutationOptions = <TError = PostApplicationZsErrorType<PostApplicationZs400 | PostApplicationZs500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationZs>>, TError,{data: PostApplicationZsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationZs>>, TError,{data: PostApplicationZsBody}, TContext> => {
    
const mutationKey = ['postApplicationZs'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationZs>>, {data: PostApplicationZsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApplicationZs(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationZsMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationZs>>>
    export type PostApplicationZsMutationBody = PostApplicationZsBody
    export type PostApplicationZsMutationError = PostApplicationZsErrorType<PostApplicationZs400 | PostApplicationZs500>

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const usePostApplicationZs = <TError = PostApplicationZsErrorType<PostApplicationZs400 | PostApplicationZs500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationZs>>, TError,{data: PostApplicationZsBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationZs>>,
        TError,
        {data: PostApplicationZsBody},
        TContext
      > => {

      const mutationOptions = getPostApplicationZsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    