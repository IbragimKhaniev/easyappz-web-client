/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationsApplicationIdMessages404,
  GetApplicationsApplicationIdMessages500,
  IMongoModelMessage,
  PostApplicationsApplicationIdMessages200,
  PostApplicationsApplicationIdMessages400,
  PostApplicationsApplicationIdMessages500,
  PostApplicationsApplicationIdMessagesBody
} from './types'
import getApplicationsApplicationIdMessagesMutator from '../axios';
import type { ErrorType as GetApplicationsApplicationIdMessagesErrorType } from '../axios';
import postApplicationsApplicationIdMessagesMutator from '../axios';
import type { ErrorType as PostApplicationsApplicationIdMessagesErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationsApplicationIdMessages = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsApplicationIdMessagesMutator<IMongoModelMessage[]>(
      {url: `/applications/${applicationId}/messages`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsApplicationIdMessagesQueryKey = (applicationId: string,) => {
    return [`/applications/${applicationId}/messages`] as const;
    }

    
export const getGetApplicationsApplicationIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsApplicationIdMessagesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>> = ({ signal }) => getApplicationsApplicationIdMessages(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsApplicationIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>>
export type GetApplicationsApplicationIdMessagesQueryError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>


export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages404 | GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsApplicationIdMessagesQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const postApplicationsApplicationIdMessages = (
    applicationId: string,
    postApplicationsApplicationIdMessagesBody: PostApplicationsApplicationIdMessagesBody,
 signal?: AbortSignal
) => {
      
      
      return postApplicationsApplicationIdMessagesMutator<PostApplicationsApplicationIdMessages200>(
      {url: `/applications/${applicationId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApplicationsApplicationIdMessagesBody, signal
    },
      );
    }
  


export const getPostApplicationsApplicationIdMessagesMutationOptions = <TError = PostApplicationsApplicationIdMessagesErrorType<PostApplicationsApplicationIdMessages400 | PostApplicationsApplicationIdMessages500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>, TError,{applicationId: string;data: PostApplicationsApplicationIdMessagesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>, TError,{applicationId: string;data: PostApplicationsApplicationIdMessagesBody}, TContext> => {
    
const mutationKey = ['postApplicationsApplicationIdMessages'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>, {applicationId: string;data: PostApplicationsApplicationIdMessagesBody}> = (props) => {
          const {applicationId,data} = props ?? {};

          return  postApplicationsApplicationIdMessages(applicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationsApplicationIdMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>>
    export type PostApplicationsApplicationIdMessagesMutationBody = PostApplicationsApplicationIdMessagesBody
    export type PostApplicationsApplicationIdMessagesMutationError = PostApplicationsApplicationIdMessagesErrorType<PostApplicationsApplicationIdMessages400 | PostApplicationsApplicationIdMessages500>

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const usePostApplicationsApplicationIdMessages = <TError = PostApplicationsApplicationIdMessagesErrorType<PostApplicationsApplicationIdMessages400 | PostApplicationsApplicationIdMessages500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>, TError,{applicationId: string;data: PostApplicationsApplicationIdMessagesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationsApplicationIdMessages>>,
        TError,
        {applicationId: string;data: PostApplicationsApplicationIdMessagesBody},
        TContext
      > => {

      const mutationOptions = getPostApplicationsApplicationIdMessagesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    