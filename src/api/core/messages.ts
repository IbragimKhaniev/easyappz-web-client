/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationZsApplicationzIdMessages404,
  GetApplicationZsApplicationzIdMessages500,
  IMongoModelMessage,
  PostApplicationZsApplicationzIdMessages200,
  PostApplicationZsApplicationzIdMessages400,
  PostApplicationZsApplicationzIdMessages500,
  PostApplicationZsApplicationzIdMessagesBody
} from './types'
import getApplicationZsApplicationzIdMessagesMutator from '../axios';
import type { ErrorType as GetApplicationZsApplicationzIdMessagesErrorType } from '../axios';
import postApplicationZsApplicationzIdMessagesMutator from '../axios';
import type { ErrorType as PostApplicationZsApplicationzIdMessagesErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationZsApplicationzIdMessages = (
    applicationzId: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationZsApplicationzIdMessagesMutator<IMongoModelMessage[]>(
      {url: `/applicationZs/${applicationzId}/messages`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationZsApplicationzIdMessagesQueryKey = (applicationzId: string,) => {
    return [`/applicationZs/${applicationzId}/messages`] as const;
    }

    
export const getGetApplicationZsApplicationzIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>>(applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationZsApplicationzIdMessagesQueryKey(applicationzId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>> = ({ signal }) => getApplicationZsApplicationzIdMessages(applicationzId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationzId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationZsApplicationzIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>>
export type GetApplicationZsApplicationzIdMessagesQueryError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>


export function useGetApplicationZsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>>(
 applicationzId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationZsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationZsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError = GetApplicationZsApplicationzIdMessagesErrorType<GetApplicationZsApplicationzIdMessages404 | GetApplicationZsApplicationzIdMessages500>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationZsApplicationzIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationZsApplicationzIdMessagesQueryOptions(applicationzId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const postApplicationZsApplicationzIdMessages = (
    applicationzId: string,
    postApplicationZsApplicationzIdMessagesBody: PostApplicationZsApplicationzIdMessagesBody,
 signal?: AbortSignal
) => {
      
      
      return postApplicationZsApplicationzIdMessagesMutator<PostApplicationZsApplicationzIdMessages200>(
      {url: `/applicationZs/${applicationzId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApplicationZsApplicationzIdMessagesBody, signal
    },
      );
    }
  


export const getPostApplicationZsApplicationzIdMessagesMutationOptions = <TError = PostApplicationZsApplicationzIdMessagesErrorType<PostApplicationZsApplicationzIdMessages400 | PostApplicationZsApplicationzIdMessages500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApplicationZsApplicationzIdMessagesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApplicationZsApplicationzIdMessagesBody}, TContext> => {
    
const mutationKey = ['postApplicationZsApplicationzIdMessages'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>, {applicationzId: string;data: PostApplicationZsApplicationzIdMessagesBody}> = (props) => {
          const {applicationzId,data} = props ?? {};

          return  postApplicationZsApplicationzIdMessages(applicationzId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationZsApplicationzIdMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>>
    export type PostApplicationZsApplicationzIdMessagesMutationBody = PostApplicationZsApplicationzIdMessagesBody
    export type PostApplicationZsApplicationzIdMessagesMutationError = PostApplicationZsApplicationzIdMessagesErrorType<PostApplicationZsApplicationzIdMessages400 | PostApplicationZsApplicationzIdMessages500>

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const usePostApplicationZsApplicationzIdMessages = <TError = PostApplicationZsApplicationzIdMessagesErrorType<PostApplicationZsApplicationzIdMessages400 | PostApplicationZsApplicationzIdMessages500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApplicationZsApplicationzIdMessagesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationZsApplicationzIdMessages>>,
        TError,
        {applicationzId: string;data: PostApplicationZsApplicationzIdMessagesBody},
        TContext
      > => {

      const mutationOptions = getPostApplicationZsApplicationzIdMessagesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    