/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * EaseAppz API
 * API documentation for EaseAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApiApplicationzsApplicationzIdMessages200Item,
  PostApiApplicationzsApplicationzIdMessages200,
  PostApiApplicationzsApplicationzIdMessagesBody
} from './types'
import getApiApplicationzsApplicationzIdMessagesMutator from '../axios';
import type { ErrorType as GetApiApplicationzsApplicationzIdMessagesErrorType } from '../axios';
import postApiApplicationzsApplicationzIdMessagesMutator from '../axios';
import type { ErrorType as PostApiApplicationzsApplicationzIdMessagesErrorType } from '../axios';




/**
 * @summary Get messages by applicationzId
 */
export const getApiApplicationzsApplicationzIdMessages = (
    applicationzId: string,
 signal?: AbortSignal
) => {
      
      
      return getApiApplicationzsApplicationzIdMessagesMutator<GetApiApplicationzsApplicationzIdMessages200Item[]>(
      {url: `/api/applicationzs/${applicationzId}/messages`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiApplicationzsApplicationzIdMessagesQueryKey = (applicationzId: string,) => {
    return [`/api/applicationzs/${applicationzId}/messages`] as const;
    }

    
export const getGetApiApplicationzsApplicationzIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>>(applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationzsApplicationzIdMessagesQueryKey(applicationzId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>> = ({ signal }) => getApiApplicationzsApplicationzIdMessages(applicationzId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationzId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiApplicationzsApplicationzIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>>
export type GetApiApplicationzsApplicationzIdMessagesQueryError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>


export function useGetApiApplicationzsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>>(
 applicationzId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiApplicationzsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiApplicationzsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get messages by applicationzId
 */

export function useGetApiApplicationzsApplicationzIdMessages<TData = Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError = GetApiApplicationzsApplicationzIdMessagesErrorType<void>>(
 applicationzId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsApplicationzIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiApplicationzsApplicationzIdMessagesQueryOptions(applicationzId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new message by applicationzId
 */
export const postApiApplicationzsApplicationzIdMessages = (
    applicationzId: string,
    postApiApplicationzsApplicationzIdMessagesBody: PostApiApplicationzsApplicationzIdMessagesBody,
 signal?: AbortSignal
) => {
      
      
      return postApiApplicationzsApplicationzIdMessagesMutator<PostApiApplicationzsApplicationzIdMessages200>(
      {url: `/api/applicationzs/${applicationzId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiApplicationzsApplicationzIdMessagesBody, signal
    },
      );
    }
  


export const getPostApiApplicationzsApplicationzIdMessagesMutationOptions = <TError = PostApiApplicationzsApplicationzIdMessagesErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApiApplicationzsApplicationzIdMessagesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApiApplicationzsApplicationzIdMessagesBody}, TContext> => {
    
const mutationKey = ['postApiApplicationzsApplicationzIdMessages'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>, {applicationzId: string;data: PostApiApplicationzsApplicationzIdMessagesBody}> = (props) => {
          const {applicationzId,data} = props ?? {};

          return  postApiApplicationzsApplicationzIdMessages(applicationzId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiApplicationzsApplicationzIdMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>>
    export type PostApiApplicationzsApplicationzIdMessagesMutationBody = PostApiApplicationzsApplicationzIdMessagesBody
    export type PostApiApplicationzsApplicationzIdMessagesMutationError = PostApiApplicationzsApplicationzIdMessagesErrorType<void>

    /**
 * @summary Create a new message by applicationzId
 */
export const usePostApiApplicationzsApplicationzIdMessages = <TError = PostApiApplicationzsApplicationzIdMessagesErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>, TError,{applicationzId: string;data: PostApiApplicationzsApplicationzIdMessagesBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiApplicationzsApplicationzIdMessages>>,
        TError,
        {applicationzId: string;data: PostApiApplicationzsApplicationzIdMessagesBody},
        TContext
      > => {

      const mutationOptions = getPostApiApplicationzsApplicationzIdMessagesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    