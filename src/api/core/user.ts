/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetUser200,
  GetUser401,
  GetUser500,
  PostUser201,
  PostUser500,
  PostUserBody,
  PostUserLogin200,
  PostUserLogin401,
  PostUserLogin500,
  PostUserLoginBody
} from './types'
import getUserMutator from '../axios';
import type { ErrorType as GetUserErrorType } from '../axios';
import postUserMutator from '../axios';
import type { ErrorType as PostUserErrorType } from '../axios';
import postUserLoginMutator from '../axios';
import type { ErrorType as PostUserLoginErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUser = (
    
 signal?: AbortSignal
) => {
      
      
      return getUserMutator<GetUser200>(
      {url: `/user`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserQueryKey = () => {
    return [`/user`] as const;
    }

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = GetUserErrorType<GetUser401 | GetUser500>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = GetUserErrorType<GetUser401 | GetUser500>


export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUserErrorType<GetUser401 | GetUser500>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUserErrorType<GetUser401 | GetUser500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUserErrorType<GetUser401 | GetUser500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = GetUserErrorType<GetUser401 | GetUser500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email.
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const postUser = (
    postUserBody: PostUserBody,
 signal?: AbortSignal
) => {
      
      
      return postUserMutator<PostUser201>(
      {url: `/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postUserBody, signal
    },
      );
    }
  


export const getPostUserMutationOptions = <TError = PostUserErrorType<PostUser500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: PostUserBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: PostUserBody}, TContext> => {
    
const mutationKey = ['postUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUser>>, {data: PostUserBody}> = (props) => {
          const {data} = props ?? {};

          return  postUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserMutationResult = NonNullable<Awaited<ReturnType<typeof postUser>>>
    export type PostUserMutationBody = PostUserBody
    export type PostUserMutationError = PostUserErrorType<PostUser500>

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePostUser = <TError = PostUserErrorType<PostUser500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: PostUserBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUser>>,
        TError,
        {data: PostUserBody},
        TContext
      > => {

      const mutationOptions = getPostUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email –∏ –∫–æ–¥–æ–º.
 * @summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const postUserLogin = (
    postUserLoginBody: PostUserLoginBody,
 signal?: AbortSignal
) => {
      
      
      return postUserLoginMutator<PostUserLogin200>(
      {url: `/user/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postUserLoginBody, signal
    },
      );
    }
  


export const getPostUserLoginMutationOptions = <TError = PostUserLoginErrorType<PostUserLogin401 | PostUserLogin500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: PostUserLoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: PostUserLoginBody}, TContext> => {
    
const mutationKey = ['postUserLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserLogin>>, {data: PostUserLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postUserLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postUserLogin>>>
    export type PostUserLoginMutationBody = PostUserLoginBody
    export type PostUserLoginMutationError = PostUserLoginErrorType<PostUserLogin401 | PostUserLogin500>

    /**
 * @summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePostUserLogin = <TError = PostUserLoginErrorType<PostUserLogin401 | PostUserLogin500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: PostUserLoginBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserLogin>>,
        TError,
        {data: PostUserLoginBody},
        TContext
      > => {

      const mutationOptions = getPostUserLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    