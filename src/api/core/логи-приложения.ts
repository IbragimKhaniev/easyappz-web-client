/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationsApplicationIdLogs200,
  GetApplicationsApplicationIdLogs400,
  GetApplicationsApplicationIdLogs500
} from './types'
import getApplicationsApplicationIdLogsMutator from '../axios';
import type { ErrorType as GetApplicationsApplicationIdLogsErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationsApplicationIdLogs = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsApplicationIdLogsMutator<GetApplicationsApplicationIdLogs200>(
      {url: `/applications/${applicationId}/logs`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsApplicationIdLogsQueryKey = (applicationId: string,) => {
    return [`/applications/${applicationId}/logs`] as const;
    }

    
export const getGetApplicationsApplicationIdLogsQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsApplicationIdLogsQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>> = ({ signal }) => getApplicationsApplicationIdLogs(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsApplicationIdLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>>
export type GetApplicationsApplicationIdLogsQueryError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>


export function useGetApplicationsApplicationIdLogs<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdLogs<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdLogs<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationsApplicationIdLogs<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError = GetApplicationsApplicationIdLogsErrorType<GetApplicationsApplicationIdLogs400 | GetApplicationsApplicationIdLogs500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdLogs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsApplicationIdLogsQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



