/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteApplicationsApplicationIdFilesFile200,
  DeleteApplicationsApplicationIdFilesFile500,
  DeleteApplicationsApplicationIdFilesFileBody,
  GetApplicationsApplicationIdFilesFile200,
  GetApplicationsApplicationIdFilesFile500,
  GetApplicationsApplicationIdFilesFileParams,
  GetApplicationsIdFiles200,
  GetApplicationsIdFiles500,
  PutApplicationsApplicationIdFilesFile200,
  PutApplicationsApplicationIdFilesFile500,
  PutApplicationsApplicationIdFilesFileBody
} from './types'
import deleteApplicationsApplicationIdFilesFileMutator from '../axios';
import type { ErrorType as DeleteApplicationsApplicationIdFilesFileErrorType } from '../axios';
import getApplicationsApplicationIdFilesFileMutator from '../axios';
import type { ErrorType as GetApplicationsApplicationIdFilesFileErrorType } from '../axios';
import putApplicationsApplicationIdFilesFileMutator from '../axios';
import type { ErrorType as PutApplicationsApplicationIdFilesFileErrorType } from '../axios';
import getApplicationsIdFilesMutator from '../axios';
import type { ErrorType as GetApplicationsIdFilesErrorType } from '../axios';




/**
 * –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å.
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const deleteApplicationsApplicationIdFilesFile = (
    applicationId: string,
    deleteApplicationsApplicationIdFilesFileBody: DeleteApplicationsApplicationIdFilesFileBody,
 ) => {
      
      
      return deleteApplicationsApplicationIdFilesFileMutator<DeleteApplicationsApplicationIdFilesFile200>(
      {url: `/applications/${applicationId}/files/file`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteApplicationsApplicationIdFilesFileBody
    },
      );
    }
  


export const getDeleteApplicationsApplicationIdFilesFileMutationOptions = <TError = DeleteApplicationsApplicationIdFilesFileErrorType<DeleteApplicationsApplicationIdFilesFile500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: DeleteApplicationsApplicationIdFilesFileBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: DeleteApplicationsApplicationIdFilesFileBody}, TContext> => {
    
const mutationKey = ['deleteApplicationsApplicationIdFilesFile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>, {applicationId: string;data: DeleteApplicationsApplicationIdFilesFileBody}> = (props) => {
          const {applicationId,data} = props ?? {};

          return  deleteApplicationsApplicationIdFilesFile(applicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApplicationsApplicationIdFilesFileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>>
    export type DeleteApplicationsApplicationIdFilesFileMutationBody = DeleteApplicationsApplicationIdFilesFileBody
    export type DeleteApplicationsApplicationIdFilesFileMutationError = DeleteApplicationsApplicationIdFilesFileErrorType<DeleteApplicationsApplicationIdFilesFile500>

    /**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const useDeleteApplicationsApplicationIdFilesFile = <TError = DeleteApplicationsApplicationIdFilesFileErrorType<DeleteApplicationsApplicationIdFilesFile500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: DeleteApplicationsApplicationIdFilesFileBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteApplicationsApplicationIdFilesFile>>,
        TError,
        {applicationId: string;data: DeleteApplicationsApplicationIdFilesFileBody},
        TContext
      > => {

      const mutationOptions = getDeleteApplicationsApplicationIdFilesFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä filePath.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationsApplicationIdFilesFile = (
    applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsApplicationIdFilesFileMutator<GetApplicationsApplicationIdFilesFile200>(
      {url: `/applications/${applicationId}/files/file`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApplicationsApplicationIdFilesFileQueryKey = (applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams,) => {
    return [`/applications/${applicationId}/files/file`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApplicationsApplicationIdFilesFileQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>>(applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsApplicationIdFilesFileQueryKey(applicationId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>> = ({ signal }) => getApplicationsApplicationIdFilesFile(applicationId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsApplicationIdFilesFileQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>>
export type GetApplicationsApplicationIdFilesFileQueryError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>


export function useGetApplicationsApplicationIdFilesFile<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>>(
 applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdFilesFile<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>>(
 applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdFilesFile<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>>(
 applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationsApplicationIdFilesFile<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError = GetApplicationsApplicationIdFilesFileErrorType<GetApplicationsApplicationIdFilesFile500>>(
 applicationId: string,
    params: GetApplicationsApplicationIdFilesFileParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdFilesFile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsApplicationIdFilesFileQueryOptions(applicationId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const putApplicationsApplicationIdFilesFile = (
    applicationId: string,
    putApplicationsApplicationIdFilesFileBody: PutApplicationsApplicationIdFilesFileBody,
 ) => {
      
      
      return putApplicationsApplicationIdFilesFileMutator<PutApplicationsApplicationIdFilesFile200>(
      {url: `/applications/${applicationId}/files/file`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApplicationsApplicationIdFilesFileBody
    },
      );
    }
  


export const getPutApplicationsApplicationIdFilesFileMutationOptions = <TError = PutApplicationsApplicationIdFilesFileErrorType<PutApplicationsApplicationIdFilesFile500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: PutApplicationsApplicationIdFilesFileBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: PutApplicationsApplicationIdFilesFileBody}, TContext> => {
    
const mutationKey = ['putApplicationsApplicationIdFilesFile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>, {applicationId: string;data: PutApplicationsApplicationIdFilesFileBody}> = (props) => {
          const {applicationId,data} = props ?? {};

          return  putApplicationsApplicationIdFilesFile(applicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApplicationsApplicationIdFilesFileMutationResult = NonNullable<Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>>
    export type PutApplicationsApplicationIdFilesFileMutationBody = PutApplicationsApplicationIdFilesFileBody
    export type PutApplicationsApplicationIdFilesFileMutationError = PutApplicationsApplicationIdFilesFileErrorType<PutApplicationsApplicationIdFilesFile500>

    /**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const usePutApplicationsApplicationIdFilesFile = <TError = PutApplicationsApplicationIdFilesFileErrorType<PutApplicationsApplicationIdFilesFile500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>, TError,{applicationId: string;data: PutApplicationsApplicationIdFilesFileBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putApplicationsApplicationIdFilesFile>>,
        TError,
        {applicationId: string;data: PutApplicationsApplicationIdFilesFileBody},
        TContext
      > => {

      const mutationOptions = getPutApplicationsApplicationIdFilesFileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationsIdFiles = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsIdFilesMutator<GetApplicationsIdFiles200>(
      {url: `/applications/${id}/files`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsIdFilesQueryKey = (id: string,) => {
    return [`/applications/${id}/files`] as const;
    }

    
export const getGetApplicationsIdFilesQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsIdFilesQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsIdFiles>>> = ({ signal }) => getApplicationsIdFiles(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsIdFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsIdFiles>>>
export type GetApplicationsIdFilesQueryError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>


export function useGetApplicationsIdFiles<TData = Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsIdFiles>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsIdFiles>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsIdFiles<TData = Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsIdFiles>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsIdFiles>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsIdFiles<TData = Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationsIdFiles<TData = Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError = GetApplicationsIdFilesErrorType<GetApplicationsIdFiles500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsIdFiles>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsIdFilesQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



