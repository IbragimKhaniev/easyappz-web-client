/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BadRequestResponse,
  GetApplications200,
  GetApplications401,
  GetApplications500,
  IMongoModelApplication,
  PostApplicationsApplicationIdRestart200,
  PostApplicationsApplicationIdRestart400,
  PostApplicationsApplicationIdRestart404,
  PostApplicationsApplicationIdRestart500,
  PostApplicationsBody,
  ServerErrorResponse
} from './types'
import postApplicationsApplicationIdRestartMutator from '../axios';
import type { ErrorType as PostApplicationsApplicationIdRestartErrorType } from '../axios';
import getApplicationsMutator from '../axios';
import type { ErrorType as GetApplicationsErrorType } from '../axios';
import postApplicationsMutator from '../axios';
import type { ErrorType as PostApplicationsErrorType } from '../axios';




/**
 * –û—á–∏—â–∞–µ—Ç –ø–æ–ª–µ deployingError —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—è –æ —Ç–æ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞.
 * @summary –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
export const postApplicationsApplicationIdRestart = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return postApplicationsApplicationIdRestartMutator<PostApplicationsApplicationIdRestart200>(
      {url: `/applications/${applicationId}/restart`, method: 'POST', signal
    },
      );
    }
  


export const getPostApplicationsApplicationIdRestartMutationOptions = <TError = PostApplicationsApplicationIdRestartErrorType<PostApplicationsApplicationIdRestart400 | PostApplicationsApplicationIdRestart404 | PostApplicationsApplicationIdRestart500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>, TError,{applicationId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>, TError,{applicationId: string}, TContext> => {
    
const mutationKey = ['postApplicationsApplicationIdRestart'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>, {applicationId: string}> = (props) => {
          const {applicationId} = props ?? {};

          return  postApplicationsApplicationIdRestart(applicationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationsApplicationIdRestartMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>>
    
    export type PostApplicationsApplicationIdRestartMutationError = PostApplicationsApplicationIdRestartErrorType<PostApplicationsApplicationIdRestart400 | PostApplicationsApplicationIdRestart404 | PostApplicationsApplicationIdRestart500>

    /**
 * @summary –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
export const usePostApplicationsApplicationIdRestart = <TError = PostApplicationsApplicationIdRestartErrorType<PostApplicationsApplicationIdRestart400 | PostApplicationsApplicationIdRestart404 | PostApplicationsApplicationIdRestart500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>, TError,{applicationId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationsApplicationIdRestart>>,
        TError,
        {applicationId: string},
        TContext
      > => {

      const mutationOptions = getPostApplicationsApplicationIdRestartMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (req.user).
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getApplications = (
    
 signal?: AbortSignal
) => {
      
      
      return getApplicationsMutator<GetApplications200>(
      {url: `/applications`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsQueryKey = () => {
    return [`/applications`] as const;
    }

    
export const getGetApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getApplications>>, TError = GetApplicationsErrorType<GetApplications401 | GetApplications500>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplications>>> = ({ signal }) => getApplications(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApplications>>>
export type GetApplicationsQueryError = GetApplicationsErrorType<GetApplications401 | GetApplications500>


export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = GetApplicationsErrorType<GetApplications401 | GetApplications500>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplications>>,
          TError,
          Awaited<ReturnType<typeof getApplications>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = GetApplicationsErrorType<GetApplications401 | GetApplications500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplications>>,
          TError,
          Awaited<ReturnType<typeof getApplications>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = GetApplicationsErrorType<GetApplications401 | GetApplications500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetApplications<TData = Awaited<ReturnType<typeof getApplications>>, TError = GetApplicationsErrorType<GetApplications401 | GetApplications500>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const postApplications = (
    postApplicationsBody: PostApplicationsBody,
 signal?: AbortSignal
) => {
      
      
      return postApplicationsMutator<IMongoModelApplication>(
      {url: `/applications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApplicationsBody, signal
    },
      );
    }
  


export const getPostApplicationsMutationOptions = <TError = PostApplicationsErrorType<BadRequestResponse | ServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplications>>, TError,{data: PostApplicationsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplications>>, TError,{data: PostApplicationsBody}, TContext> => {
    
const mutationKey = ['postApplications'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplications>>, {data: PostApplicationsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApplications(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationsMutationResult = NonNullable<Awaited<ReturnType<typeof postApplications>>>
    export type PostApplicationsMutationBody = PostApplicationsBody
    export type PostApplicationsMutationError = PostApplicationsErrorType<BadRequestResponse | ServerErrorResponse>

    /**
 * @summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const usePostApplications = <TError = PostApplicationsErrorType<BadRequestResponse | ServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplications>>, TError,{data: PostApplicationsBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplications>>,
        TError,
        {data: PostApplicationsBody},
        TContext
      > => {

      const mutationOptions = getPostApplicationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    