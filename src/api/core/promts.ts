/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostPromtsAnalyze200,
  PostPromtsAnalyze500,
  PostPromtsAnalyzeBody
} from './types'
import postPromtsAnalyzeMutator from '../axios';
import type { ErrorType as PostPromtsAnalyzeErrorType } from '../axios';




/**
 * @summary –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const postPromtsAnalyze = (
    postPromtsAnalyzeBody: PostPromtsAnalyzeBody,
 signal?: AbortSignal
) => {
      
      
      return postPromtsAnalyzeMutator<PostPromtsAnalyze200>(
      {url: `/promts/analyze`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postPromtsAnalyzeBody, signal
    },
      );
    }
  


export const getPostPromtsAnalyzeMutationOptions = <TError = PostPromtsAnalyzeErrorType<PostPromtsAnalyze500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPromtsAnalyze>>, TError,{data: PostPromtsAnalyzeBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postPromtsAnalyze>>, TError,{data: PostPromtsAnalyzeBody}, TContext> => {
    
const mutationKey = ['postPromtsAnalyze'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPromtsAnalyze>>, {data: PostPromtsAnalyzeBody}> = (props) => {
          const {data} = props ?? {};

          return  postPromtsAnalyze(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPromtsAnalyzeMutationResult = NonNullable<Awaited<ReturnType<typeof postPromtsAnalyze>>>
    export type PostPromtsAnalyzeMutationBody = PostPromtsAnalyzeBody
    export type PostPromtsAnalyzeMutationError = PostPromtsAnalyzeErrorType<PostPromtsAnalyze500>

    /**
 * @summary –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const usePostPromtsAnalyze = <TError = PostPromtsAnalyzeErrorType<PostPromtsAnalyze500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPromtsAnalyze>>, TError,{data: PostPromtsAnalyzeBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postPromtsAnalyze>>,
        TError,
        {data: PostPromtsAnalyzeBody},
        TContext
      > => {

      const mutationOptions = getPostPromtsAnalyzeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    