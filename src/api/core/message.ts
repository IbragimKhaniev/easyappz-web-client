/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostApplicationsApplicationIdMessagesMessageIdRetry200,
  PostApplicationsApplicationIdMessagesMessageIdRetry404,
  PostApplicationsApplicationIdMessagesMessageIdRetry500
} from './types'
import postApplicationsApplicationIdMessagesMessageIdRetryMutator from '../axios';
import type { ErrorType as PostApplicationsApplicationIdMessagesMessageIdRetryErrorType } from '../axios';




/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–º—Ç—ã  —Å —Å—Ç–∞—Ç—É—Å–æ–º "error" –Ω–∞ "created" –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

 * @summary –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const postApplicationsApplicationIdMessagesMessageIdRetry = (
    applicationId: string,
    messageId: string,
 signal?: AbortSignal
) => {
      
      
      return postApplicationsApplicationIdMessagesMessageIdRetryMutator<PostApplicationsApplicationIdMessagesMessageIdRetry200>(
      {url: `/applications/${applicationId}/messages/${messageId}/retry`, method: 'POST', signal
    },
      );
    }
  


export const getPostApplicationsApplicationIdMessagesMessageIdRetryMutationOptions = <TError = PostApplicationsApplicationIdMessagesMessageIdRetryErrorType<PostApplicationsApplicationIdMessagesMessageIdRetry404 | PostApplicationsApplicationIdMessagesMessageIdRetry500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>, TError,{applicationId: string;messageId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>, TError,{applicationId: string;messageId: string}, TContext> => {
    
const mutationKey = ['postApplicationsApplicationIdMessagesMessageIdRetry'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>, {applicationId: string;messageId: string}> = (props) => {
          const {applicationId,messageId} = props ?? {};

          return  postApplicationsApplicationIdMessagesMessageIdRetry(applicationId,messageId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationsApplicationIdMessagesMessageIdRetryMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>>
    
    export type PostApplicationsApplicationIdMessagesMessageIdRetryMutationError = PostApplicationsApplicationIdMessagesMessageIdRetryErrorType<PostApplicationsApplicationIdMessagesMessageIdRetry404 | PostApplicationsApplicationIdMessagesMessageIdRetry500>

    /**
 * @summary –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const usePostApplicationsApplicationIdMessagesMessageIdRetry = <TError = PostApplicationsApplicationIdMessagesMessageIdRetryErrorType<PostApplicationsApplicationIdMessagesMessageIdRetry404 | PostApplicationsApplicationIdMessagesMessageIdRetry500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>, TError,{applicationId: string;messageId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdRetry>>,
        TError,
        {applicationId: string;messageId: string},
        TContext
      > => {

      const mutationOptions = getPostApplicationsApplicationIdMessagesMessageIdRetryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    