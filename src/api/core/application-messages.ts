/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationsApplicationIdMessages200Item,
  GetApplicationsApplicationIdMessages500,
  PostApplicationsApplicationIdMessagesMessageIdCancel200,
  PostApplicationsApplicationIdMessagesMessageIdCancel404,
  PostApplicationsApplicationIdMessagesMessageIdCancel500
} from './types'
import postApplicationsApplicationIdMessagesMessageIdCancelMutator from '../axios';
import type { ErrorType as PostApplicationsApplicationIdMessagesMessageIdCancelErrorType } from '../axios';
import getApplicationsApplicationIdMessagesMutator from '../axios';
import type { ErrorType as GetApplicationsApplicationIdMessagesErrorType } from '../axios';




/**
 * –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "completed" –∏ –æ—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * @summary –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const postApplicationsApplicationIdMessagesMessageIdCancel = (
    applicationId: string,
    messageId: string,
 signal?: AbortSignal
) => {
      
      
      return postApplicationsApplicationIdMessagesMessageIdCancelMutator<PostApplicationsApplicationIdMessagesMessageIdCancel200>(
      {url: `/applications/${applicationId}/messages/${messageId}/cancel`, method: 'POST', signal
    },
      );
    }
  


export const getPostApplicationsApplicationIdMessagesMessageIdCancelMutationOptions = <TError = PostApplicationsApplicationIdMessagesMessageIdCancelErrorType<PostApplicationsApplicationIdMessagesMessageIdCancel404 | PostApplicationsApplicationIdMessagesMessageIdCancel500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>, TError,{applicationId: string;messageId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>, TError,{applicationId: string;messageId: string}, TContext> => {
    
const mutationKey = ['postApplicationsApplicationIdMessagesMessageIdCancel'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>, {applicationId: string;messageId: string}> = (props) => {
          const {applicationId,messageId} = props ?? {};

          return  postApplicationsApplicationIdMessagesMessageIdCancel(applicationId,messageId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApplicationsApplicationIdMessagesMessageIdCancelMutationResult = NonNullable<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>>
    
    export type PostApplicationsApplicationIdMessagesMessageIdCancelMutationError = PostApplicationsApplicationIdMessagesMessageIdCancelErrorType<PostApplicationsApplicationIdMessagesMessageIdCancel404 | PostApplicationsApplicationIdMessagesMessageIdCancel500>

    /**
 * @summary –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const usePostApplicationsApplicationIdMessagesMessageIdCancel = <TError = PostApplicationsApplicationIdMessagesMessageIdCancelErrorType<PostApplicationsApplicationIdMessagesMessageIdCancel404 | PostApplicationsApplicationIdMessagesMessageIdCancel500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>, TError,{applicationId: string;messageId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApplicationsApplicationIdMessagesMessageIdCancel>>,
        TError,
        {applicationId: string;messageId: string},
        TContext
      > => {

      const mutationOptions = getPostApplicationsApplicationIdMessagesMessageIdCancelMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—è id, content, role, status –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ promts, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª—è–º–∏ content, result –∏ status.

 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const getApplicationsApplicationIdMessages = (
    applicationId: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsApplicationIdMessagesMutator<GetApplicationsApplicationIdMessages200Item[]>(
      {url: `/applications/${applicationId}/messages`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsApplicationIdMessagesQueryKey = (applicationId: string,) => {
    return [`/applications/${applicationId}/messages`] as const;
    }

    
export const getGetApplicationsApplicationIdMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>>(applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsApplicationIdMessagesQueryKey(applicationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>> = ({ signal }) => getApplicationsApplicationIdMessages(applicationId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsApplicationIdMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>>
export type GetApplicationsApplicationIdMessagesQueryError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>


export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

export function useGetApplicationsApplicationIdMessages<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError = GetApplicationsApplicationIdMessagesErrorType<GetApplicationsApplicationIdMessages500>>(
 applicationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessages>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsApplicationIdMessagesQueryOptions(applicationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



