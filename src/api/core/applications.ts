/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * EaseAppz API
 * API documentation for EaseAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApiApplicationzsId200,
  PostApiApplicationzs201
} from './types'
import getApiApplicationzsIdMutator from '../axios';
import type { ErrorType as GetApiApplicationzsIdErrorType } from '../axios';
import postApiApplicationzsMutator from '../axios';
import type { ErrorType as PostApiApplicationzsErrorType } from '../axios';




/**
 * @summary Get application by ID
 */
export const getApiApplicationzsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getApiApplicationzsIdMutator<GetApiApplicationzsId200>(
      {url: `/api/applicationzs/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApiApplicationzsIdQueryKey = (id: string,) => {
    return [`/api/applicationzs/${id}`] as const;
    }

    
export const getGetApiApplicationzsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiApplicationzsId>>, TError = GetApiApplicationzsIdErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiApplicationzsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiApplicationzsId>>> = ({ signal }) => getApiApplicationzsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiApplicationzsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiApplicationzsId>>>
export type GetApiApplicationzsIdQueryError = GetApiApplicationzsIdErrorType<void>


export function useGetApiApplicationzsId<TData = Awaited<ReturnType<typeof getApiApplicationzsId>>, TError = GetApiApplicationzsIdErrorType<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationzsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationzsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiApplicationzsId<TData = Awaited<ReturnType<typeof getApiApplicationzsId>>, TError = GetApiApplicationzsIdErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiApplicationzsId>>,
          TError,
          Awaited<ReturnType<typeof getApiApplicationzsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiApplicationzsId<TData = Awaited<ReturnType<typeof getApiApplicationzsId>>, TError = GetApiApplicationzsIdErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get application by ID
 */

export function useGetApiApplicationzsId<TData = Awaited<ReturnType<typeof getApiApplicationzsId>>, TError = GetApiApplicationzsIdErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiApplicationzsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApiApplicationzsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new application
 */
export const postApiApplicationzs = (
    postApiApplicationzsBody?: unknown,
 signal?: AbortSignal
) => {
      
      
      return postApiApplicationzsMutator<PostApiApplicationzs201>(
      {url: `/api/applicationzs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiApplicationzsBody, signal
    },
      );
    }
  


export const getPostApiApplicationzsMutationOptions = <TError = PostApiApplicationzsErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzs>>, TError,{data: unknown}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzs>>, TError,{data: unknown}, TContext> => {
    
const mutationKey = ['postApiApplicationzs'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiApplicationzs>>, {data: unknown}> = (props) => {
          const {data} = props ?? {};

          return  postApiApplicationzs(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiApplicationzsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiApplicationzs>>>
    export type PostApiApplicationzsMutationBody = unknown
    export type PostApiApplicationzsMutationError = PostApiApplicationzsErrorType<void>

    /**
 * @summary Create a new application
 */
export const usePostApiApplicationzs = <TError = PostApiApplicationzsErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiApplicationzs>>, TError,{data: unknown}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiApplicationzs>>,
        TError,
        {data: unknown},
        TContext
      > => {

      const mutationOptions = getPostApiApplicationzsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    