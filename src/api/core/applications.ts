/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApplicationsId404,
  GetApplicationsId500,
  MongoModelApplication
} from './types'
import getApplicationsIdMutator from '../axios';
import type { ErrorType as GetApplicationsIdErrorType } from '../axios';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID
 */
export const getApplicationsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsIdMutator<MongoModelApplication>(
      {url: `/applications/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsIdQueryKey = (id: string,) => {
    return [`/applications/${id}`] as const;
    }

    
export const getGetApplicationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsId>>, TError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsId>>> = ({ signal }) => getApplicationsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsId>>>
export type GetApplicationsIdQueryError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>


export function useGetApplicationsId<TData = Awaited<ReturnType<typeof getApplicationsId>>, TError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsId>>
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsId<TData = Awaited<ReturnType<typeof getApplicationsId>>, TError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsId>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsId>>
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsId<TData = Awaited<ReturnType<typeof getApplicationsId>>, TError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ ID
 */

export function useGetApplicationsId<TData = Awaited<ReturnType<typeof getApplicationsId>>, TError = GetApplicationsIdErrorType<GetApplicationsId404 | GetApplicationsId500>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



